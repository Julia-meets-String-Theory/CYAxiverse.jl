var documenterSearchIndex = {"docs":
[{"location":"api/#Available-functions","page":"API","title":"Available functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = CYAxiverse","category":"page"},{"location":"api/#Module","page":"API","title":"Module","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CYAxiverse.filestructure\nCYAxiverse.generate\nCYAxiverse.minimizer","category":"page"},{"location":"api/#Functions","page":"API","title":"Functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [CYAxiverse.filestructure, CYAxiverse.generate, CYAxiverse.minimizer, CYAxiverse.read]\nPages = [\"filestructure.jl\", \"generate.jl\", \"minimizer.jl\", \"read.jl\", \"../add_functions/cytools_wrapper.jl\"]","category":"page"},{"location":"api/#CYAxiverse.filestructure.data_dir-Tuple{}","page":"API","title":"CYAxiverse.filestructure.data_dir","text":"data_dir()\n\nCreates/reads data directory\n\n\n\n\n\n","category":"method"},{"location":"api/#CYAxiverse.filestructure.localARGS-Tuple{}","page":"API","title":"CYAxiverse.filestructure.localARGS","text":"localARGS()\n\nLoad key for data dir\n\n\n\n\n\n","category":"method"},{"location":"api/#CYAxiverse.filestructure.log_dir-Tuple{}","page":"API","title":"CYAxiverse.filestructure.log_dir","text":"log_dir()\n\nCreates/reads log directory\n\n\n\n\n\n","category":"method"},{"location":"api/#CYAxiverse.filestructure.logcreate-Tuple{String}","page":"API","title":"CYAxiverse.filestructure.logcreate","text":"logcreate(l)\n\nCreates logfile\n\n\n\n\n\n","category":"method"},{"location":"api/#CYAxiverse.filestructure.logfile-Tuple{}","page":"API","title":"CYAxiverse.filestructure.logfile","text":"logfile()\n\nReturns path of logfile in format data_dir()/logs/YYYY:MM:DD:T00:00:00.000log.out\n\n\n\n\n\n","category":"method"},{"location":"api/#CYAxiverse.filestructure.np_path-Tuple{}","page":"API","title":"CYAxiverse.filestructure.np_path","text":"np_path()\n\nWalks through datadir() and returns list of data paths and matrix of [h11; tri; cy]. Saves in h5 file pathscy.h5\n\n\n\n\n\n","category":"method"},{"location":"api/#CYAxiverse.filestructure.ol_DB-Tuple{Any}","page":"API","title":"CYAxiverse.filestructure.ol_DB","text":"ol_DB(args)\n\nDefine dict of directories for data read/write\n\n\n\n\n\n","category":"method"},{"location":"api/#CYAxiverse.filestructure.plots_dir-Tuple{}","page":"API","title":"CYAxiverse.filestructure.plots_dir","text":"plots_dir()\n\nCreates/reads a directory for plots\n\n\n\n\n\n","category":"method"},{"location":"api/#CYAxiverse.filestructure.present_dir-Tuple{}","page":"API","title":"CYAxiverse.filestructure.present_dir","text":"present_dir()\n\nReturns the present data directory using localARGS\n\n\n\n\n\n","category":"method"},{"location":"api/#CYAxiverse.generate.constants-Tuple{}","page":"API","title":"CYAxiverse.generate.constants","text":"constants()\n\nLoads constants:\n\nReduced Planck Mass = 2.435 × 10^18\nHubble = 2.13 × 0.7 × 10^-33\nlog2pi = log10(2π)\n\nas Dict{String,ArbFloat}\n\n#Examples\n\njulia> const_data = CYAxiverse.generate.constants()\nDict{String, ArbNumerics.ArbFloat{128}} with 3 entries:\n  \"MPlanck\" => 2435000000000000000.0\n  \"log2π\"   => 0.7981798683581150521959557408991\n  \"Hubble\"  => 1.490999999999999999287243983194e-33\n\n\n\n\n\n","category":"method"},{"location":"api/#CYAxiverse.generate.gauss_diff-Tuple{Float64}","page":"API","title":"CYAxiverse.generate.gauss_diff","text":"gauss_diff(z)\n\nComputes the difference of 2 numbers in (natural) log-space using the definition here. #Examples\n\njulia> CYAxiverse.generate.gauss_diff(10.)\n9.99995459903963\n\njulia> CYAxiverse.generate.gauss_diff(1000.)\n1000.0\n\n\n\n\n\n","category":"method"},{"location":"api/#CYAxiverse.generate.gauss_log_split-Tuple{Vector{Int64}, Vector{Float64}}","page":"API","title":"CYAxiverse.generate.gauss_log_split","text":"gauss_log_split(sign, log)\n\nAlgorithm to compute Gaussian logarithms, as detailed here. #Examples\n\njulia> CYAxiverse.generate.gauss_diff(10.)\n9.99995459903963\n\njulia> CYAxiverse.generate.gauss_diff(1000.)\n1000.0\n\n\n\n\n\n","category":"method"},{"location":"api/#CYAxiverse.generate.gauss_sum-Tuple{Float64}","page":"API","title":"CYAxiverse.generate.gauss_sum","text":"gauss_sum(z)\n\nComputes the addition of 2 numbers in (natural) log-space using the definition here. #Examples\n\njulia> CYAxiverse.generate.gauss_sum(10.)\n10.000045398899218\n\njulia> CYAxiverse.generate.gauss_sum(1000.)\n1000.0\n\n\n\n\n\n","category":"method"},{"location":"api/#CYAxiverse.generate.hp_spectrum-Tuple{LinearAlgebra.Hermitian{Float64, Matrix{Float64}}, Matrix{Float64}, Matrix{Int64}}","page":"API","title":"CYAxiverse.generate.hp_spectrum","text":"hp_spectrum(K,L,Q; prec=5_000)\n\nUses potential data generated by CYTools (or randomly generated) to compute axion spectra – masses, quartic couplings and decay constants – to high precision. #Examples\n\njulia> const_data = CYAxiverse.generate.constants()\nDict{String, ArbNumerics.ArbFloat{128}} with 3 entries:\n  \"MPlanck\" => 2435000000000000000.0\n  \"log2π\"   => 0.7981798683581150521959557408991\n  \"Hubble\"  => 1.490999999999999999287243983194e-33\n\n\n\n\n\n","category":"method"},{"location":"api/#CYAxiverse.generate.pseudo_K","page":"API","title":"CYAxiverse.generate.pseudo_K","text":"pseudo_K(h11,tri,cy=1)\n\nRandomly generates an h11 × h11 Hermitian matrix with positive definite eigenvalues #Examples\n\njulia> K = CYAxiverse.generate.pseudo_K(4,10,1)\n4×4 Hermitian{Float64, Matrix{Float64}}:\n 2.64578  2.61012  0.91203  2.27339\n 2.61012  3.89684  2.22451  1.93356\n 0.91203  2.22451  2.94717  1.58126\n 2.27339  1.93356  1.58126  4.85208\n\njulia> eigen(K).values\n4-element Vector{Float64}:\n 0.17629073145135896\n 1.8632009739875723\n 2.7425362219513487\n 9.559840749713599\n\n\n\n\n\n","category":"function"},{"location":"api/#CYAxiverse.generate.pseudo_L","page":"API","title":"CYAxiverse.generate.pseudo_L","text":"pseudo_L(h11,tri,cy=1;log=true)\n\nRandomly generates a h11+4+C(h11+4,2)-length hierarchical list of instanton scales, similar to those found in the KS Axiverse.  Option for (sign,log10) or full precision. #Examples\n\njulia> CYAxiverse.generate.pseudo_L(4,10)\n36×2 Matrix{Float64}:\n  1.0     0.0\n  1.0    -4.0\n  1.0    -8.0\n  1.0   -12.0\n  1.0   -16.0\n  1.0   -20.0\n  1.0   -24.0\n  1.0   -28.0\n -1.0   -29.4916\n  1.0   -33.8515\n  ⋮\n  1.0  -133.665\n -1.0  -138.951\n\njulia> CYAxiverse.generate.pseudo_L(4,10,log=false)\n36-element Vector{ArbNumerics.ArbFloat}:\n  1.0\n  0.0001\n  1.0e-8\n  1.0e-12\n  1.0e-16\n  1.0e-20\n  1.0e-24\n  1.0e-28\n -1.462574279422558833057690597964e-31\n -2.381595397961591074099629406235e-34\n  ⋮\n  3.796809523142314798130344022481e-134\n -3.173000613781491329619833894919e-138\n\n\n\n\n\n","category":"function"},{"location":"api/#CYAxiverse.generate.pseudo_Q","page":"API","title":"CYAxiverse.generate.pseudo_Q","text":"pseudo_Q(h11,tri,cy=1)\n\nRandomly generates an instanton charge matrix that takes the same form as those found in the KS Axiverse, namely I(h11) with 4 randomly filled rows and the cross-terms, i.e. an h11+4+C(h11+4,2) × h11 integer matrix. #Examples\n\njulia> CYAxiverse.generate.pseudo_Q(4,10,1)\n36×4 Matrix{Int64}:\n  1   0   0   0\n  0   1   0   0\n  0   0   1   0\n  0   0   0   1\n  1   4  -3   5\n -5  -4  -2   4\n  4   5   3  -2\n -5   2  -3  -3\n  ⋮\n -9  -9  -5   6\n  0  -6   1   7\n  9   3   6   1\n\n\n\n\n\n","category":"function"},{"location":"api/#CYAxiverse.generate.vacua-Tuple{Matrix{Float64}, Matrix{Int64}}","page":"API","title":"CYAxiverse.generate.vacua","text":"vacua(L,Q; threshold)\n\nCompute the number of vacua given an instanton charge matrix Q and 2-column matrix of instanton scales L (in the form [sign; exponent]) and a threshold for:\n\nfracLambda_aLambda_j\n\ni.e. is the instanton contribution large enough to affect the minima.\n\nFor small systems (Nax<=50) the algorithm computes the ratio of volumes of the fundamental domain of the leading potential and the full potential.\n\nFor larger systems, the algorithm only computes the volume of the fundamental domain of the leading potential. #Examples\n\njulia> using CYAxiverse\njulia> h11,tri,cy = 10,20,1;\njulia> pot_data = CYAxiverse.read.potential(h11,tri,cy);\njulia> vacua_data = CYAxiverse.generate.vacua(pot_data[\"L\"],pot_data[\"Q\"])\nDict{String, Any} with 3 entries:\n  \"θ∥\"     => Rational[1//1 0//1 … 0//1 0//1; 0//1 1//1 … 0//1 0//1; … ; 0//1 0//1 … 1//1 0//1; 0//1 0//1 … 0//1 1//1]\n  \"vacua\"  => 3\n  \"Qtilde\" => [0 0 … 1 0; 0 0 … 0 0; … ; 1 1 … 0 0; 0 0 … 0 0]\n\n\n\n\n\n","category":"method"},{"location":"api/#CYAxiverse.generate.vacua_JLM-Tuple{Matrix{Float64}, Matrix{Int64}}","page":"API","title":"CYAxiverse.generate.vacua_JLM","text":"vacua_JLM(L,Q)\n\nCompute the number of vacua given an instanton charge matrix Q and 2-column matrix of instanton scales L (in the form [sign; exponent])\n\nFor small systems (Nax<=50) the algorithm computes the ratio of volumes of the fundamental domain of the leading potential and the full potential.\n\nFor larger systems, the algorithm only computes the volume of the fundamental domain of the leading potential. #Examples\n\njulia> using CYAxiverse\njulia> h11,tri,cy = 10,20,1;\njulia> pot_data = CYAxiverse.read.potential(h11,tri,cy);\njulia> vacua_data = CYAxiverse.generate.vacua_TB(pot_data[\"L\"],pot_data[\"Q\"])\nDict{String, Any} with 3 entries:\n  \"θ∥\"     => Rational[1//1 0//1 … 0//1 0//1; 0//1 1//1 … 0//1 0//1; … ; 0//1 0//1 … 1//1 0//1; 0//1 0//1 … 0//1 1//1]\n  \"vacua\"  => 11552.0\n  \"Qtilde\" => [0 0 … 0 1; 0 0 … 0 0; … ; 1 1 … -1 -1; 0 0 … 0 0]\n\n\n\n\n\n","category":"method"},{"location":"api/#CYAxiverse.generate.vacua_TB-Tuple{Int64, Int64, Int64}","page":"API","title":"CYAxiverse.generate.vacua_TB","text":"vacua_TB(h11,tri,cy)\n\nCompute the number of vacua given a geometry from the KS database.\n\nFor small systems (Nax<=50) the algorithm computes the ratio of volumes of the fundamental domain of the leading potential and the full potential.\n\nFor larger systems, the algorithm only computes the volume of the fundamental domain of the leading potential. #Examples\n\njulia> using CYAxiverse\njulia> h11,tri,cy = 10,20,1;\njulia> vacua_data = CYAxiverse.generate.vacua_TB(h11,tri,cy)\nDict{String, Any} with 3 entries:\n  \"θ∥\"     => Rational[1//1 0//1 … 0//1 0//1; 0//1 1//1 … 0//1 0//1; … ; 0//1 0//1 … 1//1 0//1; 0//1 0//1 … 0//1 1//1]\n  \"vacua\"  => 11552.0\n  \"Qtilde\" => [0 0 … 0 1; 0 0 … 0 0; … ; 1 1 … -1 -1; 0 0 … 0 0]\n\n\n\n\n\n","category":"method"},{"location":"api/#CYAxiverse.generate.vacua_TB-Tuple{Matrix{Float64}, Matrix{Int64}}","page":"API","title":"CYAxiverse.generate.vacua_TB","text":"vacua_TB(L,Q)\n\nCompute the number of vacua given an instanton charge matrix Q and 2-column matrix of instanton scales L (in the form [sign; exponent])\n\nFor small systems (Nax<=50) the algorithm computes the ratio of volumes of the fundamental domain of the leading potential and the full potential.\n\nFor larger systems, the algorithm only computes the volume of the fundamental domain of the leading potential. #Examples\n\njulia> using CYAxiverse\njulia> h11,tri,cy = 10,20,1;\njulia> pot_data = CYAxiverse.read.potential(h11,tri,cy);\njulia> vacua_data = CYAxiverse.generate.vacua_TB(pot_data[\"L\"],pot_data[\"Q\"])\nDict{String, Any} with 3 entries:\n  \"θ∥\"     => Rational[1//1 0//1 … 0//1 0//1; 0//1 1//1 … 0//1 0//1; … ; 0//1 0//1 … 1//1 0//1; 0//1 0//1 … 0//1 1//1]\n  \"vacua\"  => 11552.0\n  \"Qtilde\" => [0 0 … 0 1; 0 0 … 0 0; … ; 1 1 … -1 -1; 0 0 … 0 0]\n\n\n\n\n\n","category":"method"},{"location":"userguide/#User-guide","page":"User guide","title":"User guide","text":"","category":"section"},{"location":"userguide/","page":"User guide","title":"User guide","text":"warning: Warning\nUnder construction","category":"page"},{"location":"#CYAxiverse.jl","page":"Home","title":"CYAxiverse.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia package to compute axion/ALP spectra from string theory (using output of CYTools)","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Authors","page":"Home","title":"Authors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Viraf M. Mehta","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"warning: Warning\nThis package is currently not registered with the julia package manager and is still under development.  Use at your own risk!","category":"page"},{"location":"#Acknowledgements","page":"Home","title":"Acknowledgements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This project was born after publication of Superradiance in String Theory and I am grateful to my collaborators for their input while this code was evolving.","category":"page"}]
}
